/* 
SQL adventure with Adventure Works Data!
I dug into the Adventure Works database to explore its rich dataset and extract valuable insights.
SQL brought out the gems in the data to satisfy the following business requirements:
*/

--Creating Orders table by unioning all sales data, inserting the product price and calculating the total amount
SELECT 
	s.*, 
	ProductPrice, 
	ROUND(OrderQuantity*ProductPrice,2) AS Amount
INTO Orders
FROM (SELECT * FROM Sales_2020
	UNION ALL
	SELECT * FROM Sales_2021
	UNION ALL
	SELECT * FROM Sales_2022
	) AS s 
JOIN Products p
	ON s.ProductKey = p.ProductKey;

SELECT * FROM Orders;

--1. Retrieve the customers who have placed orders with a total amount greater than $10000.
SELECT 
	c.CustomerKey
	, CONCAT(c.FirstName,' ', c.LastName) AS Fullname
	, SUM(o.Amount) as Total_Amount
FROM 
	Customers c
JOIN 
	Orders o
	ON c.CustomerKey = o.CustomerKey
GROUP BY 
	c.CustomerKey
	, CONCAT(c.FirstName,' ', c.LastName) 
HAVING 
	SUM(o.Amount) > 10000
ORDER BY 
	Total_Amount DESC;

--2. Retrieve the total revenue and total orders generated by each product category
-- Method 1
SELECT
    PC.ProductCategoryKey,
    PC.CategoryName,
    COUNT(o.ProductKey) AS TotalOrders,
    ROUND(SUM(o.Amount),2) AS TotalRevenue
FROM
    Product_categories pc
JOIN
    Product_Subcategories ps 
	ON PC.ProductCategoryKey = ps.ProductCategoryKey
JOIN
    Products p 
	ON PS.ProductSubCategoryKey = p.ProductSubCategoryKey
LEFT JOIN
    Orders o 
	ON P.ProductKey = o.ProductKey
--WHERE o.OrderNumber IS NOT NULL
GROUP BY
    PC.ProductCategoryKey, PC.CategoryName
ORDER BY TotalRevenue DESC;

--Method 2
SELECT
    PC.ProductCategoryKey,
    PC.CategoryName,
    COUNT(O.ProductKey) AS TotalOrders,
    ROUND(SUM(O.Amount),2) AS TotalRevenue
FROM
    Product_Categories PC
JOIN
    Product_Subcategories ps
	ON PC.ProductCategoryKey = PS.ProductCategoryKey
JOIN
    Products p 
	ON ps.ProductSubCategoryKey = p.ProductSubCategoryKey
JOIN
    Orders o 
	ON p.ProductKey = o.ProductKey
GROUP BY
    PC.ProductCategoryKey, PC.CategoryName
ORDER BY TotalRevenue DESC;

-- Method 3
SELECT
    PC.*,
    COUNT(O.ProductKey) AS TotalOrders,
    ROUND(SUM(O.Amount),2) AS TotalRevenue
FROM
    Product_Categories PC
JOIN
    Product_Subcategories ps
	ON PC.ProductCategoryKey = PS.ProductCategoryKey
JOIN
    Products p 
	ON ps.ProductSubCategoryKey = p.ProductSubCategoryKey
JOIN
    Orders o 
	ON p.ProductKey = o.ProductKey
GROUP BY
    PC.ProductCategoryKey, PC.CategoryName
ORDER BY TotalRevenue DESC;

/*3. Retrieve the names of products, sub-categories and their categories for products with a 
selling price greater than the average selling price of all products. - SQ*/
--AVG SELLING PRICE
SELECT 
	AVG(ProductPrice)
FROM Products;

-- SUBQUERY METHOD
SELECT
    p.ProductName
    , pc.ProductCategoryKey
    , pc.CategoryName
    , ps.ProductSubcategoryKey
    , ps.SubcategoryName
    --,p.ProductPrice
FROM
    Products p
JOIN
    Product_Subcategories ps 
	ON p.ProductSubcategoryKey = ps.ProductSubcategoryKey
JOIN
    Product_Categories pc 
	ON ps.ProductCategoryKey = pc.ProductCategoryKey
WHERE
    p.ProductPrice > 
	(SELECT AVG(ProductPrice)
        FROM Products);

--4. How many customers have placed orders in “Canada”? List the customer names - SQ
-- How many customers have placed orders in “Canada”?
SELECT 
	COUNT(DISTINCT(c.CustomerKey)) AS 'Total Customers'
FROM 
	Customers c
JOIN 
	Orders o
	ON c.CustomerKey = o.CustomerKey
JOIN
	Territory t
	ON o.TerritoryKey = t.SalesTerritoryKey
WHERE 
	t.Country = 'Canada';

-- SUBQUERY to list the customer names
SELECT
    DISTINCT(CONCAT(c.FirstName,' ',c.LastName)) AS Fullname
FROM
    Customers c
WHERE
    c.CustomerKey IN 
		(SELECT DISTINCT o.CustomerKey
		FROM
            Orders o
        JOIN
            Territory t
			ON o.TerritoryKey = t.SalesTerritoryKey
        WHERE
            t.Country = 'Canada');
--5. Find the 10 products that have been returned the most. How much money was generated by these products? - SQ
-- 10 products that have been returned the most
SELECT 
	TOP 10
    ProductKey
    ,SUM(ReturnQuantity) AS ReturnedQuantity
 FROM
     Returns
GROUP BY
     ProductKey 
ORDER BY
       ReturnedQuantity DESC;

--How much money was generated by these products? (SUBQUERY)
SELECT
    p.ProductName
    , p.ProductKey
    , p.ProductPrice
    , r.ReturnedQuantity
    , ROUND((p.ProductPrice * r.ReturnedQuantity),2) AS TotalMoneyGenerated
FROM
    Products p
JOIN
   (SELECT 
		TOP 10
         ProductKey
         , SUM(ReturnQuantity) AS ReturnedQuantity
	FROM
		Returns
    GROUP BY
		ProductKey
    ORDER BY
        SUM(ReturnQuantity) DESC
    ) r 
	ON p.ProductKey = r.ProductKey
ORDER BY 
	TotalMoneyGenerated DESC;

--6. Get a list of customers who have placed orders in more than one territory.
SELECT 
	CONCAT(c.FirstName,' ',c.LastName) AS Fullname
FROM 
	Customers c
JOIN 
	Orders o
	ON c.CustomerKey = o.CustomerKey
GROUP BY 
	CONCAT(c.FirstName,' ',c.LastName)
HAVING 
	COUNT(DISTINCT(o.TerritoryKey))	>1;

--7. Retrieve the product names and their corresponding sub-categories for products that have been ordered at least 10 times.
SELECT
    P.ProductName,
    PS.SubcategoryName
FROM
    Products P
JOIN
    Product_Subcategories PS ON P.ProductSubcategoryKey = PS.ProductSubcategoryKey
JOIN
    Orders O ON P.ProductKey = O.ProductKey
GROUP BY
    P.ProductName, PS.SubcategoryName
HAVING
    COUNT(O.ProductKey) >= 10;

-- 8. List the customer names who have placed orders after 2021. What is the distribution of their occupation?
SELECT
	DISTINCT(CONCAT(c.FirstName,' ',c.LastName)) AS Fullname
	, c.Occupation
FROM 
	Customers c
JOIN
	Orders o
	ON c.CustomerKey = o.CustomerKey
WHERE o.OrderDate > '2020-12-31';

--9. Get a list of products and their corresponding order quantities for products that have been ordered at least 5 times.
SELECT
	p.ProductName
	,o.OrderQuantity
FROM
	Products p
JOIN 
	orders o
	ON p.ProductKey = o.ProductKey
GROUP BY p.ProductName
	,o.OrderQuantity
HAVING COUNT(o.OrderNumber) >= 5;
--
SELECT
	p.ProductName
	,o.OrderQuantity
FROM
	Products p
JOIN 
	orders o
	ON p.ProductKey = o.ProductKey
GROUP BY p.ProductName
	,o.OrderQuantity
HAVING COUNT(o.ProductKey) >= 5;

--10. Retrieve the product names that start with the letter "C" or “H” and are from the "Clothing" category.
-- Method 1
SELECT
	p.ProductName
FROM 
	Products p
JOIN 
	Product_Subcategories ps
	ON p.ProductSubcategoryKey = ps.ProductSubcategoryKey
JOIN
	Product_Categories pc
	ON ps.ProductCategoryKey = pc.ProductCategoryKey
WHERE 
	pc.CategoryName = 'Clothing'
	AND (p.ProductName LIKE 'C%'
	OR p.ProductName LIKE 'H%');

-- Method 2
SELECT
	p.ProductName
FROM
	Products p
JOIN 
	Product_Subcategories ps 
	ON p.ProductSubcategoryKey = ps.ProductSubcategoryKey
JOIN 
	Product_Categories pc 
	ON ps.ProductCategoryKey = pc.ProductCategoryKey
WHERE
	(
    p.ProductName LIKE 'C%'
    OR p.ProductName LIKE 'H%'
	)
	AND pc.CategoryName = 'Clothing';

--11.Retrieve the product names that have been ordered in the ‘United States’ or "Australia".
-- Method 1
SELECT 
	p.ProductName
FROM 
	Products p
JOIN 
	Orders o
	ON p.ProductKey = o.ProductKey
JOIN
	Territory t
	ON o.TerritoryKey = t.SalesTerritoryKey
WHERE 
	t.Country = 'United States'
	OR t.Country = 'Australia';
	
-- Method 2
SELECT
    P.ProductName
FROM
    Products p
JOIN
    Orders o 
	ON p.ProductKey = o.ProductKey
JOIN
    Territory t 
	ON o.TerritoryKey = t.SalesTerritoryKey
WHERE
    t.Country IN ('United States', 'Australia');

--12.Find the customer names who have placed orders with a total amount greater than the average total amount of orders. – SQ
-- Method 1
SELECT
    CONCAT(c.FirstName,' ',c.LastName) AS Fullname
FROM
    Customers c
JOIN
    (SELECT
        CustomerKey,
        SUM(Amount) AS TotalAmount
     FROM
        Orders
     GROUP BY
        CustomerKey
    ) o 
ON c.CustomerKey = o.CustomerKey
WHERE
    o.TotalAmount > 
	  (SELECT 
	       AVG(TotalAmount)
        FROM 
		   (SELECT
                CustomerKey
                , SUM(Amount) AS TotalAmount
            FROM
                Orders
            GROUP BY
                CustomerKey
        ) AS AvgOrders
	  );
-- Method
SELECT FirstName, LastName, total_order_amount
FROM (
    SELECT c.CustomerKey, c.FirstName, c.LastName, SUM(p.ProductPrice * o.OrderQuantity) AS total_order_amount
    FROM customers c
    JOIN orders o ON c.CustomerKey = o.CustomerKey
    JOIN products p ON o.ProductKey = p.ProductKey
    GROUP BY c.CustomerKey, c.FirstName, c.LastName
) AS customer_orders
WHERE total_order_amount > (
    SELECT AVG(total_order_amount) AS average_total_order_amount
    FROM (
        SELECT SUM(p.ProductPrice * o.OrderQuantity) AS total_order_amount
        FROM orders o
        JOIN products p ON o.ProductKey = p.ProductKey
        GROUP BY o.CustomerKey
    ) AS order_amounts
);

--13.Retrieve the top 5 customers who have placed the highest number of orders, along with their order counts.
SELECT
	TOP 5
    CONCAT(c.FirstName,' ',c.LastName) AS Fullname
    , COUNT(o.OrderNumber) AS OrderCount
FROM
    Customers c
JOIN
    Orders o 
	ON c.CustomerKey = o.CustomerKey
GROUP BY
    CONCAT(c.FirstName,' ',c.LastName)
ORDER BY
    OrderCount DESC;

--14.List the customers who have placed orders within the last 6 months.
SELECT DISTINCT
   CONCAT(c.FirstName,' ',c.LastName) AS Fullname
FROM
    Customers C
JOIN
    Orders O ON C.CustomerKey = O.CustomerKey
WHERE
    O.OrderDate >= DATEADD(MONTH, -6, (SELECT MAX(OrderDate) FROM Orders)); -- function is used to subtract the months

-- 15. We want to reach out to our best customers in 2022. Can you get emails of Top 50 customers based on revenue?
SELECT 
	TOP 50
    CONCAT(c.FirstName,' ',c.LastName) AS Fullname
    ,c.EmailAddress
    ,SUM(o.Amount) AS TotalRevenue
FROM
    Customers c
JOIN
    Orders o ON c.CustomerKey = o.CustomerKey
WHERE
    o.OrderDate >= '2022-01-01' AND O.OrderDate <= '2022-12-31'
GROUP BY
   CONCAT(c.FirstName,' ',c.LastName)
   ,c.EmailAddress
ORDER BY
    TotalRevenue DESC;
